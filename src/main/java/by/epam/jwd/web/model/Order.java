package by.epam.jwd.web.model;

import java.time.LocalDate;
import java.util.Objects;

/**
 * Entity that represents book order.
 * @author roma0
 * @version 1.0
 * @since 1.0
 */
public class Order implements DbEntity {
    private final Long id;
    private final User user;
    private final Book book;
    private final LocalDate orderDate;
    private final Status status;

    /**
     * Constructor with id generated by database.
     * Used when it's need to map database table data to instance.
     * @param id saved order id.
     * @param user user who made order.
     * @param book book what order is to.
     * @param orderDate date of book order.
     * @param status status of book order.
     */
    public Order(Long id, User user, Book book, LocalDate orderDate, Status status) {
        this.id = id;
        this.user = user;
        this.book = book;
        this.orderDate = orderDate;
        this.status = status;
    }

    /**
     * Constructor without id.
     * Used when it's need to register and save order in database table.
     * @param user user who made order.
     * @param book book what order is to.
     * @param orderDate data of book order.
     * @param status status ob book order.
     */
    public Order(User user, Book book, LocalDate orderDate, Status status) {
        this(null, user, book, orderDate, status);
    }

    /**
     * Constructs order with current order date and Ordered status
     * @param user user that makes order
     * @param book book that user wants to make
     */
    public Order(User user, Book book) {
        this(null, user, book, LocalDate.now(), Status.ORDERED);
    }

    /**
     * Returns saved order id generated by database.
     * @return saved order id.
     */
    @Override
    public Long getId() {
        return id;
    }

    /**
     * Returns user who made order.
     * @return user who made order.
     */
    public User getUser() {
        return user;
    }

    /**
     * Returns book that user wants to order.
     * @return book that need to orders.
     */
    public Book getBook() {
        return book;
    }

    /**
     * Returns order date.
     * @return order date.
     */
    public LocalDate getOrderDate() {
        return orderDate;
    }

    /**
     * Returns order's current status
     * @return order's current status.
     */
    public Status getStatus() {return status;}

    /**
     * Checks weather two objects are equal to each other.
     * @param o other object
     * @return {@code true} if two objects are equal or {@code false} otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Order order = (Order) o;
        return Objects.equals(id, order.id) && Objects.equals(user, order.user) && Objects.equals(book, order.book) && Objects.equals(orderDate, order.orderDate) && status == order.status;
    }

    /**
     * Calculates instance hash code.
     * @return instance hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, user, book, orderDate, status);
    }

    /**
     * Makes instance string representation.
     * @return instance string representation.
     */
    @Override
    public String toString() {
        return "BookOrder{" +
                "id=" + id +
                ", user=" + user +
                ", book=" + book +
                ", orderDate=" + orderDate +
                ", status=" + status +
                '}';
    }
}
