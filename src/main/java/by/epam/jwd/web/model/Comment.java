package by.epam.jwd.web.model;

import java.time.LocalDate;
import java.util.Objects;

/**
 * Entity that represents book comment.
 * @author roma0
 * @version 1.0
 * @since 1.0
 */
public class Comment implements DbEntity {
    private final Long id;
    private final User user;
    private final Book book;
    private final LocalDate date;
    private final String text;

    /**
     * Comment constructor with id generated by database.
     * Used when it's need to map comment database table data to instance.
     * @param id comment id
     * @param user user that made comment
     * @param book book to which made comment
     * @param date comment date
     * @param text comment text
     */
    public Comment(Long id, User user, Book book, LocalDate date, String text) {
        this.id = id;
        this.user = user;
        this.book = book;
        this.date = date;
        this.text = text;
    }

    /**
     * Comment constructor without id.
     * Used when it's need to register and save user comment in database table.
     * @param user user that made comment.
     * @param book book to which comment made
     * @param date comment date
     * @param text comment text
     */
    public Comment(User user, Book book, LocalDate date, String text) {
        this(null, user, book, date, text);
    }

    /**
     * Comment on current date.
     * @param user commented user
     * @param book commented book
     * @param text text of comment
     */
    public Comment(User user, Book book, String text) {
        this(null, user, book, LocalDate.now(), text);
    }

    /**
     * Returns id generated by database.
     * @return comment id.
     */
    @Override
    public Long getId() {
        return id;
    }

    /**
     * Returns user that made comment.
     * @return user that made comment.
     */
    public User getUser() {
        return user;
    }

    /**
     * Returns book to which comment made.
     * @return comment book.
     */
    public Book getBook() {
        return book;
    }

    /**
     * Returns comment date.
     * @return comment date.
     */
    public LocalDate getDate() {
        return date;
    }

    /**
     * Returns comment text.
     * @return comment text.
     */
    public String getText() {
        return text;
    }

    /**
     * Check weather two objects equal to each other.
     * @param o other object.
     * @return {@code true} if objects are equals or {@code false} otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Comment comment = (Comment) o;
        return Objects.equals(id, comment.id) && Objects.equals(user, comment.user) && Objects.equals(book, comment.book) && Objects.equals(date, comment.date) && Objects.equals(text, comment.text);
    }

    /**
     * Calculates instance hash code.
     * @return instance hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, user, book, date, text);
    }

    /**
     * Makes instance string representation.
     * @return instance string representation.
     */
    @Override
    public String toString() {
        return "Comment{" +
                "id=" + id +
                ", user=" + user +
                ", book=" + book +
                ", date=" + date +
                ", text='" + text + '\'' +
                '}';
    }
}
