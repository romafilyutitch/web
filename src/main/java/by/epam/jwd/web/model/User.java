package by.epam.jwd.web.model;

import java.util.Objects;

/**
 * Entity represents application user.
 * @author roma0
 * @version 1.0
 * @since 1.0
 */
public class User implements DbEntity, Comparable<User> {
    private final Long id;
    private final String login;
    private final String password;
    private final UserRole role;
    private final Subscription subscription;

    /**
     * Constructor with id generated by database.
     * Used when it's need to map database table data to instance.
     * @param id saved user id generated by database.
     * @param login user login.
     * @param password user password.
     * @param role user role.
     * @param subscription user subscription.
     */
    public User(Long id, String login, String password, UserRole role, Subscription subscription) {
        this.id = id;
        this.login = login;
        this.password = password;
        this.role = role;
        this.subscription = subscription;
    }

    /**
     * Constructor without user id and with subscription.
     * If user has subscription that matches with current date
     * then user can order and read book at once. When user dont have subscription
     * or user subscription doesn't matches with current date then user have to
     * order book and wait for order approve by librarian or admin.
     * Used when it's need to save and register user with subscription in database.
     * @param login user login.
     * @param password user password.
     * @param role user role.
     * @param subscription user subscription.
     */
    public User(String login, String password, UserRole role, Subscription subscription) {
        this(null, login, password, role, subscription);
    }

    /**
     * Constructor without user id and subscription.
     * Used whent it's need to save user without subscription in database.
     * @param login user login .
     * @param password user password.
     * @param role user role.
     */
    public User(String login, String password, UserRole role) {
        this(null, login, password, role, null);
    }

    /**
     * Constructor with login and password.
     * Sets role to reader by default.
     * @param login user login.
     * @param password user password.
     */
    public User(String login , String password) {
        this(login, password, UserRole.READER);
    }

    /**
     * Returns saved user id generated by database.
     * @return saved user id generated by database.
     */
    @Override
    public Long getId() {
        return id;
    }

    /**
     * Returns user login.
     * @return user login.
     */
    public String getLogin() {
        return login;
    }

    /**
     * Returns user password.
     * @return user password.
     */
    public String getPassword() {
        return password;
    }

    /**
     * Returns user role (Reader, Librarian or Admin)
     * @return user role.
     */
    public UserRole getRole() {
        return role;
    }

    /**
     * Returns user subscription.
     * User may mot have subscription and may return null.
     * @return user subscription if user has it or null otherwise.
     */
    public Subscription getSubscription() {
        return subscription;
    }

    /**
     * Compares two user instances by their logins ignore case.
     * @param o other user instance.
     * @return positive number if instance login is greater then
     * passed user instance login  or negative number if
     * passed instance login is greater then instance login or
     * 0 if users logins are equal to each other.
     */
    @Override
    public int compareTo(User o) {
        return login.compareToIgnoreCase(o.getLogin());
    }

    /**
     * Check weather two objects are equal to each other.
     * @param o other object.
     * @return {@code true} if objects are equal or {@code false} otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        User that = (User) o;
        return Objects.equals(id, that.id) && Objects.equals(login, that.login) && Objects.equals(password, that.password) && role == that.role && Objects.equals(subscription, that.subscription);
    }

    /**
     * Calculates instance hash code.
     * @return instance hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, login, password, role, subscription);
    }

    /**
     * Makes instance string representation.
     * @return instance string representation.
     */
    @Override
    public String toString() {
        return "LibraryUser{" +
                "id=" + id +
                ", login='" + login + '\'' +
                ", password='" + password + '\'' +
                ", role=" + role +
                ", userSubscription=" + subscription +
                '}';
    }
}
